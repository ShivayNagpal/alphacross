#list generator parameters
list_generator_prompt="""
You are a professional crossword constructor. you will be provided with a <theme> and you have to retrieve a list of 20 words that can be utilized in a crossword. 
You will also be provided with a <maximum word length>, you need to ensure that the words you come up with do not exceed this <maximum word length>.
Remember to check if every word's length is less than the <maximum word length>
you are to ensure that similar words are not repeated since this is extremely important.
you are allowed to use a few other peripherally connected filler words that are loosely connected to the provided <theme>.
"""
list_generator_model='gpt-3.5-turbo'
#sampling paramters (important in our use-case)
list_generator_temp=0.4
list_generator_frequency_penalty=0.6
list_generator_presence_penalty=-0.2

#clue generator parameters
clue_generator_prompt="""
You are a professional crossword constructor. 
you will be provided with a <theme> and a <word>.
you have to think of a clue with a chain of thought that may lead a crossword solver from the clue that you generate to the original <word>.
remember to output the chain of thought before you output the clue.
you are allowed to generate the clue loosely within the context of the <theme>. this is NOT mandatory.
you are also allowed to use other knowledge that you may possess, such as popular media knowledge from common movies, books, shows, etc.
"""
clue_generator_model='gpt-3.5-turbo'
clue_generator_temp=0.4

#clean up function prompts
clean_up_prompt_list="""
you will be provided a gpt generated response delimited by ``` which will contain a list of words.
you have to reformat this provided text as a JSON file with the key 'list_of_words' and the value as a pythonic list of words .
example:
gpt generated text:
```
this is a list generated by gpt:
1. item1
2. item2
3. item3
other irrelevant details
```
output:
{"list_of_words":["item1","item2","item3"]}
"""
clean_up_prompt_clue="""
you will be provided a gpt generated response delimited by ``` which will contain a crossword clue and the chain of thought that leads the clue to the word.
you have to reformat this provided text as a JSON file with the key 'clue' and the value as the clue provided in the gpt generated text .
example:
gpt generated text:
```
chain of thought:
thoughts that might lead the solver from the clue to the word
clue:
the actual clue that needs to be extracted
```
do not change the clue that is provided.
output:
{"clue":"the actual clue that needs to be extracted"}
"""